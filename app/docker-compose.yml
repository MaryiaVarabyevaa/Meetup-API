version: '3'

services:
  meetup:
    container_name: meetup
    build:
      context: ./meetup
    ports:
      - "5000:5000"
    depends_on:
      - auth
      - meetup-db
    env_file:
      - ./meetup/.production.env
    networks:
      - mynetwork


  meetup-db:
    container_name: meetup-db
    image: postgres:latest
    restart: always
    env_file:
      - ./meetup/.production.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    ports:
      - 5433:5433
    networks:
      - mynetwork

  auth:
    container_name: auth
    build:
      context: ./auth
    ports:
      - "8080:8080"
    env_file:
      - ./auth/.production.env
    networks:
      - mynetwork
    depends_on:
      - auth-db

  auth-db:
    container_name: auth-db
    image: postgres:latest
    restart: always
    env_file:
      - ./auth/.production.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - mynetwork

#
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#    ports:
#      - 2181:2181
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - 9092:9092
#      - 9094:9094
#    volumes:
#      - ./data/kafka1/data:/var/lib/kafka/data
#      - ./data/kafka1/etc:/etc/kafka
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
#    extra_hosts:
#      - "host.docker.internal:172.17.0.1"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - esnet
  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - esnet

volumes:
  postgres-db-data:
  es-data:
#  zookeeper_data: { }
#  zookeeper_datalog: { }

networks:
  esnet:
  mynetwork:
    driver: bridge