version: '3'

services:
  meetup:
    container_name: meetup
    build:
      context: ./meetup
    ports:
      - "5000:5000"
    depends_on:
      - auth
      - meetup-db
    env_file:
      - ./meetup/.env
    networks:
      - mynetwork


  meetup-db:
    container_name: meetup-db
    image: postgres:latest
    restart: always
    env_file:
      - ./meetup/.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    ports:
      - 5433:5433
    networks:
      - mynetwork

  auth:
    container_name: auth
    build:
      context: ./auth
    ports:
      - "8080:8080"
    env_file:
      - ./auth/.env
    networks:
      - mynetwork
    depends_on:
      - auth-db

  auth-db:
    container_name: auth-db
    image: postgres:latest
    restart: always
    env_file:
      - ./auth/.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - mynetwork

#

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9094:9094
    volumes:
      - ./data/kafka1/data:/var/lib/kafka/data
      - ./data/kafka1/etc:/etc/kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

volumes:
  postgres-db-data:
  zookeeper_data: { }
  zookeeper_datalog: { }

networks:
  mynetwork:
    driver: bridge